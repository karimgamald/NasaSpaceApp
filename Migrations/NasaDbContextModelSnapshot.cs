// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharkTracking.InfrastructureData.Data;

#nullable disable

namespace NasaManagementSystem.API.Migrations
{
    [DbContext(typeof(NasaDbContext))]
    partial class NasaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharkTracking.Core.Entities.PredictionAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PredictionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SharkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SharkId");

                    b.ToTable("PredictionAlerts");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.SatelliteData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ChlorophyllConcentration")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("LightLevel")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("OxygenLevel")
                        .HasColumnType("float");

                    b.Property<double>("SeaSurfaceTemperature")
                        .HasColumnType("float");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TideLevel")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SatelliteData");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.Shark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Sharks");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.SharkTagData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Battery")
                        .HasColumnType("float");

                    b.Property<double>("Chlorophyll")
                        .HasColumnType("float");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OxygenLevel")
                        .HasColumnType("float");

                    b.Property<int>("SharkId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("WaterTemperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SharkId");

                    b.ToTable("SharkTagData");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.SharkTracking.InfrastructureData.Data.SharkMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SharkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SharkId");

                    b.ToTable("SharkMedia");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.UserAlert", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PredictionAlertId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PredictionAlertId");

                    b.HasIndex("PredictionAlertId");

                    b.ToTable("UserAlerts");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.PredictionAlert", b =>
                {
                    b.HasOne("SharkTracking.Core.Entities.Shark", "Shark")
                        .WithMany("PredictionAlerts")
                        .HasForeignKey("SharkId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Shark");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.SharkTagData", b =>
                {
                    b.HasOne("SharkTracking.Core.Entities.Shark", "Shark")
                        .WithMany("SharkTagData")
                        .HasForeignKey("SharkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shark");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.SharkTracking.InfrastructureData.Data.SharkMedia", b =>
                {
                    b.HasOne("SharkTracking.Core.Entities.Shark", "Shark")
                        .WithMany()
                        .HasForeignKey("SharkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shark");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.UserAlert", b =>
                {
                    b.HasOne("SharkTracking.Core.Entities.PredictionAlert", "PredictionAlert")
                        .WithMany("UserAlerts")
                        .HasForeignKey("PredictionAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharkTracking.Core.Entities.User", "User")
                        .WithMany("UserAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PredictionAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.PredictionAlert", b =>
                {
                    b.Navigation("UserAlerts");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.Shark", b =>
                {
                    b.Navigation("PredictionAlerts");

                    b.Navigation("SharkTagData");
                });

            modelBuilder.Entity("SharkTracking.Core.Entities.User", b =>
                {
                    b.Navigation("UserAlerts");
                });
#pragma warning restore 612, 618
        }
    }
}
